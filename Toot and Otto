Projects
========

Coding projects I have done for different classes and/or fun 
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;


public class TootAndOtto2 implements ActionListener{
  
  private JButton[][] buttons;
  
  private int turn;
  
  private boolean won = false;
  
  public TootAndOtto2() {
    this.buttons = new JButton[6][6];
    for (int i = 0; i < this.buttons.length; i++) {
      for (int j = 0; j < this.buttons[i].length; j++) {
        this.buttons[i][j] = new JButton();
        buttons[i][j].addActionListener(this);
      }
    }
  }
  
  public TootAndOtto2(int rows , int columns) {
    this.buttons = new JButton[rows][columns];
    for (int i = 0; i < this.buttons.length; i++) {
      for (int j = 0; j < this.buttons[i].length; j++) {
        this.buttons[i][j] = new JButton();
        buttons[i][j].addActionListener(this);
      }
    }
  }
  
  public String getTurn() {
    if (this.turn == 0)
      return "Player 1's turn";
    else
      return "Player 2's turn";
  }
  
  public int getRows() {
    return this.buttons.length;
  }
  
  public int getColumns() {
    return this.buttons[0].length;
  }
  
  public boolean getWon() {
    return this.won;
  }
  
  public void setWon(boolean status) {
    this.won = status;
  }
  
  public void createBoard() {
    JFrame board = new JFrame();
    JPanel grid = new JPanel(new GridLayout(this.getRows() , this.getColumns()));
    for (int i = 0; i < this.getRows(); i++) {
      for (int j = 0; j < this.getColumns(); j++) {
        grid.add(this.buttons[i][j]);
      }
    }
    board.setSize(500 , 500);
    board.getContentPane().add(grid);
    board.setVisible(true);
    board.setTitle("Toot and Otto");
  }
    
  public void actionPerformed(ActionEvent e) {
    JButton space = (JButton) e.getSource();
    if (won == false) {
      int[] coordinates = this.getButtonCoordinates(space);
      int xCoordinate = coordinates[0];
      int yCoordinate = coordinates[1];
      space = this.dropGamePiece(xCoordinate , yCoordinate);
      if (space.getText() == "") {
        if (turn == 0) {
          space.setText("T");
          space.setBackground(Color.red);
          space.setForeground(Color.white);
          this.turn = 1;
        }
        else if (turn == 1) {
          space.setText("O");
          space.setBackground(Color.yellow);
          space.setForeground(Color.black);
          this.turn = 0;
        }
      }
      space.setFont(new Font("Plain" , Font.PLAIN , 20));
      int[] droppedCoordinates = this.getButtonCoordinates(space);
      int xDropped = droppedCoordinates[0];
      int yDropped = droppedCoordinates[1];
      this.setWon(this.checkForWinner(xDropped , yDropped));
      if (this.getWon() == true && this.turn == 0) {
        JFrame winner = new JFrame();
        JTextArea display = new JTextArea("Player 2 Wins!");
        display.setBackground(Color.red);
        display.setForeground(Color.white);
        display.setFont(new Font("Plain" , Font.PLAIN , 50));
        winner.setTitle("Game Over!");
        winner.setSize(350 , 125);
        winner.getContentPane().add(display);
        winner.setVisible(true);
      }
      else if (this.getWon() == true && this.turn == 1) {
        JFrame winner = new JFrame();
        JTextArea display = new JTextArea("Player 1 Wins!");
        display.setBackground(Color.red);
        display.setForeground(Color.white);
        display.setFont(new Font("Plain" , Font.PLAIN , 50));
        winner.setTitle("Game Over!");
        winner.setSize(350 , 125);
        winner.getContentPane().add(display);
        winner.setVisible(true);
      }
    }
  }
  
  public int[] getButtonCoordinates(JButton clicked) {
    int[] answer = {0, 0};
    for (int i = 0; i < this.getRows(); i++) {
      for (int j = 0; j < this.getColumns(); j++) {
        if (this.buttons[i][j].equals(clicked)) {
          answer = new int[] {i , j};
        }
      }
    }
    return answer;
  }
  
  public JButton dropGamePiece(int xCoordinate , int yCoordinate) {
    JButton search = this.buttons[this.getRows() -1][yCoordinate];
    int count = this.buttons.length -1;
    while (search.getText().equals("") == false) {
      count--;
      if (count == 0)
        return this.buttons[count][yCoordinate];
      else
      search = this.buttons[count][yCoordinate];
    }
    return search;
  }
  
  public boolean checkForWinner(int xCoordinate , int yCoordinate) {
    StringBuilder horizontal = new StringBuilder();
    StringBuilder vertical = new StringBuilder();
    StringBuilder diagonal = new StringBuilder();
    JButton[] clickedRow = this.buttons[xCoordinate];
    int winner = 0;
    
    // Creates a string consisting of letters in that row.
    for (int i = 0; i < clickedRow.length; i++) {
      String currentButton = clickedRow[i].getText();
      if (currentButton.equals(""))
        horizontal.append(" ");
      else 
        horizontal.append(currentButton);
    }
    
    // Creates a string consisting of letters in that column.
    for (int i = 0; i < this.getRows(); i++) {
      String currentButton = this.buttons[i][yCoordinate].getText();
      if (currentButton.equals("")) 
        vertical.append(" ");
      else
        vertical.append(currentButton);
    }
    
    
    //Creates a String consisting of letters in that diagonal starting in the upper left hand corner.
    for (int irow = 0; irow < clickedRow.length-3; irow++) {
      for (int j = 0; j < this.getRows()-3; j++) {
        diagonal.append(irow);
        diagonal.append(j);
        int k = j;
        for (int i = irow; i < clickedRow.length; i++) {
          String currentButton = this.buttons[k][i].getText();
          if (currentButton.equals("")) 
            diagonal.append(" ");
          else
            diagonal.append(currentButton);
          k++; 
          if (k >= this.getRows()) {
            break;
          }
        }
      }
    }
    
    //Creates a String consisting of letters in that diagonal starting in the upper right hand corner.
    for (int irow = clickedRow.length-1; irow > clickedRow.length-3; irow--) {
      for (int j = 0; j < this.getRows()-3; j++) {
        diagonal.append(irow);
        diagonal.append(j);
        int k = j;
        for (int i = irow; i >= 0; i--) {
          String currentButton = this.buttons[k][i].getText();
          if (currentButton.equals("")) 
            diagonal.append(" ");
          else
            diagonal.append(currentButton);
          k++; 
          if (k >= this.getRows()) {
            break;
          }
        }
      }
    }

    // Checks to see if TOOT or OTTO is in the row.
    int limit = horizontal.length() - 3;
    for (int i = 0; i < limit; i++) {
      if (horizontal.substring(i , i + 4).equals("TOOT") || horizontal.substring(i , i + 4).equals("OTTO")){
        for (int k = i; k < (i + 4); k++) {
          this.buttons[xCoordinate][k].setBackground(Color.magenta);
          this.buttons[xCoordinate][k].setForeground(Color.white);
          winner++;
        }
      }
    }
    
    // Checks to see if TOOT or OTTO is in the column.
    limit = vertical.length() - 3;
    for (int i = 0; i < limit; i++) {
      if (vertical.substring(i , i + 4).equals("TOOT") || vertical.substring(i , i + 4).equals("OTTO")) {
        for (int k = i; k < (i + 4); k++) {
          this.buttons[k][yCoordinate].setBackground(Color.magenta);
          this.buttons[k][yCoordinate].setForeground(Color.white);
          winner++;
        }
      }
    }
    
    // Checks to see if TOOT or OTTO is in the diagonal. 
    limit = diagonal.length() - 4;
    String test = "";
    xCoordinate = 0;
    yCoordinate = 0;
    int setCount = 0;
    
    for (int i = 0; i < limit; i++) {
     //get yCoordinate
     for (int k = 0; k < this.getRows(); k++) {
      test = test.valueOf(k);
      if (diagonal.substring(i, i + 1).equals(test)) {
       yCoordinate = k;
       i++;
       setCount = 0;
       break;
      }
     }
     //get xCoordinate
     for (int j = 0; j < clickedRow.length; j++) {
      test = test.valueOf(j);
      if (diagonal.substring(i, i + 1).equals(test)) {
       xCoordinate = j;
       i++;
       break;
      }
     }
     //check if word is on diagonal
     if (diagonal.substring(i , i + 4).equals("TOOT") || diagonal.substring(i , i + 4).equals("OTTO")) {
      //have to tell is reading from left to right or right to left
      if (yCoordinate <= (vertical.length()/2)){ 
          yCoordinate = yCoordinate + setCount;
          xCoordinate = xCoordinate + setCount;
       for (int k = yCoordinate; k < (yCoordinate + 4); k++) {
           this.buttons[xCoordinate][k].setBackground(Color.magenta);
         this.buttons[xCoordinate][k].setForeground(Color.white);
           xCoordinate++;
         winner++;
       }
      }
      else {
          yCoordinate = yCoordinate - setCount;
          xCoordinate = xCoordinate + setCount;
       for (int k = yCoordinate; k > (yCoordinate - 4); k--) {
             this.buttons[xCoordinate][k].setBackground(Color.magenta);
           this.buttons[xCoordinate][k].setForeground(Color.white);
             xCoordinate++;
           winner++;
         }
      }
     }
     setCount++;
    }
    return winner > 0;
  }
  
  
  public static void main(String[] args) {
    if (args.length == 0) {
      TootAndOtto play = new TootAndOtto();
      play.createBoard();
    }
    else if (args.length > 0) {
      TootAndOtto play = new TootAndOtto(Integer.parseInt(args[0]) , Integer.parseInt(args[1]));
      play.createBoard();
    }
  }
}
